// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    email,
    hashed_password
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, hashed_password, created_at, is_deleted, deleted_at
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_token_whitelist WHERE user_id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, refresh_token, expires_at, created_at FROM refresh_token_whitelist WHERE user_id = $1 AND refresh_token = $2
`

type GetRefreshTokenParams struct {
	UserID       int32
	RefreshToken pgtype.UUID
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (RefreshTokenWhitelist, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, arg.UserID, arg.RefreshToken)
	var i RefreshTokenWhitelist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, hashed_password, created_at, is_deleted, deleted_at FROM users WHERE email = $1 AND is_deleted = FALSE
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO 
    refresh_token_whitelist(user_id, refresh_token, expires_at) 
VALUES(
    $1, $2, NOW() + INTERVAL '5 minute'
)
`

type InsertRefreshTokenParams struct {
	UserID       int32
	RefreshToken pgtype.UUID
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, insertRefreshToken, arg.UserID, arg.RefreshToken)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE
    users
SET
    is_deleted = TRUE,
    deleted_at = NOW()
WHERE
    id = $1
AND email = $2
`

type SoftDeleteUserParams struct {
	ID    int32
	Email string
}

func (q *Queries) SoftDeleteUser(ctx context.Context, arg SoftDeleteUserParams) error {
	_, err := q.db.Exec(ctx, softDeleteUser, arg.ID, arg.Email)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    username = coalesce($1, username),
    hashed_password = coalesce($2, hashed_password)
WHERE
    id = $3
AND (
    $1::VARCHAR IS NOT NULL AND $1 IS DISTINCT FROM username OR
    $2::VARCHAR IS NOT NULL AND $2 IS DISTINCT FROM hashed_password
) AND 
    is_deleted = FALSE
RETURNING id, username, email, hashed_password, created_at, is_deleted, deleted_at
`

type UpdateUserParams struct {
	Username       string
	HashedPassword string
	ID             int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserIsDeleted = `-- name: UpdateUserIsDeleted :one
UPDATE
    users
SET
    is_deleted = FALSE
WHERE
    email = $1
RETURNING id, username, email, hashed_password, created_at, is_deleted, deleted_at
`

func (q *Queries) UpdateUserIsDeleted(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, updateUserIsDeleted, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}
